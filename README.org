#+TITLE: README
#+SUBTITLE: My personal dotfiles
#+AUTHOR: Ben Mezger
#+DATE: <2020-08-06 Thu>

#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline

#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_BASE_DIR: .
#+HUGO_SECTION: .
#+EXPORT_FILE_NAME: _index.md

[[https://github.com/benmezger/dotfiles/actions][https://github.com/benmezger/dotfiles/workflows/dotfiles/badge.svg]]

This file holds my system configuration, including install scripts and
application configuration. They are written in Emacs Org-mode, which allows me to
reference snippets withing source blocks, and export them to a final file. I
edit /some/ of my configuration here and it gets auto exported to the correct
path. I use =chezmoi= to handle any secret and dynamic variables across my
configuration, which allows me to keep multiple configuration for multiple
machines in one repository, by handling them as templates.

* System dependencies :deps:
** Installing Homebrew :osx:
#+BEGIN_SRC bash :noweb-ref homebrew-install
curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh
#+END_SRC

** Installing Chezmoi with Homebrew :osx:
#+BEGIN_SRC bash :noweb-ref chezmoi-brew-install
brew install chezmoi
#+END_SRC

** Installing chezmoi without Homebrew :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref chezmoi-install
curl -sfL https://git.io/chezmoi | sh
#+END_SRC

** Install Homebrew packages :osx:
=brew bundle= requires either =Brewfile= to be defined at the
=HOMEBREW_BUNDLE_FILE='s env, or passed with =--file== flag or be at the same
directory the command is ran.
#+BEGIN_SRC bash :noweb-ref brew-bundle
brew bundle
#+END_SRC
** Install =mute app= :osx:
#+BEGIN_SRC bash :noweb-ref muteapp-install
curl https://github.com/pixel-point/mute-me/releases/download/v2.0.0-rc2/mute-me-v2.0.0-rc2.zip \
        -L -o /tmp/muteme.zip

unzip -o /tmp/muteme.zip -d /tmp/
mv "/tmp/Mute Me.app" "$HOME/Applications/Mute Me.app"
#+END_SRC

** Installing Chezmoi with Pacman :archlinux:
#+BEGIN_SRC bash :noweb-ref chezmoi-pacman-install
sudo pacman -S chezmoi --noconfirm
#+END_SRC

** Installing Pacman packages :archlinux:
For an example of a Pacman package file, see [[file:Pacfile][Pacfile]]. The following, assumes
Pacfile is set in an env variable called =PACMAN_BUNDLE_FILE=.

#+BEGIN_SRC bash :noweb-ref pacman-bundle
sudo pacman -Syy
sudo pacman -S --noconfirm --needed - <"$PACMAN_BUNDLE_FILE"
#+END_SRC

** Install Paru (AUR wrapper) :archlinux:
#+BEGIN_SRC bash :noweb-ref aur-paru-install
PARU_PATH=/tmp/paru

git clone https://aur.archlinux.org/paru.git $PARU_PATH
(cd $PARU_PATH && makepkg -si)
#+END_SRC

** Install AUR packages :archlinux:
For an example of a AUR package file, see [[file:Aurfile][Aurfile]]. The following, assumes
Aurfile is set in an env variable called =AUR_BUNDLE_FILE=.
#+BEGIN_SRC bash :noweb-ref aur-package-install
paru -S --nouseask - <"$AUR_BUNDLE_FILE"
#+END_SRC

** Install Git repositories :archlinux:osx:
*** Install Zplug :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref zplug-install
ZPLUG_PATH="$HOME/.zplug"
if [ ! -d "$ZPLUG_PATH" ]; then
	git clone https://github.com/zplug/zplug "$ZPLUG_PATH"
fi
#+END_SRC

*** Install Tmux TPM :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref tmux-tpm-install
TMUX_TPM_PATH="$HOME/.tmux/plugins/tpm"
if [ ! -d "$TMUX_TPM_PATH" ]; then
	mkdir -p "$TMUX_TPM_PATH"
	git clone https://github.com/tmux-plugin/tpm "$TMUX_TPM_PATH"
fi
#+END_SRC

*** Install Vim Plug :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref vim-plug-install
VIM_PLUG_PATH="$HOME/.vim/autoload"
if [ ! -d "$VIM_PLUG_PATH" ]; then
	curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

	if ! [ -x "$(command -v nvim)" ]; then
		nvim +PlugInstall +qall --headless
	fi
fi
#+END_SRC

*** Install Base-16 :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref base16-install
BASE16_PATH="$HOME/.config/base16-shell"
if [ ! -d "$BASE16_PATH" ]; then
	mkdir -p "$BASE16_PATH"
	git clone https://github.com/chriskempson/base16-shell "$BASE16_PATH"
fi
#+END_SRC
*** Install Emacs Doom :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref emacs-doom-install
EMACS_PATH="$HOME/.emacs.d"
if [ ! -d "$EMACS_PATH" ]; then
	mkdir -p "$EMACS_PATH"
	git clone --depth 1 https://github.com/hlissner/doom-emacs "$EMACS_PATH"
	"$EMACS_PATH"/bin/doom -y install
else
	"$EMACS_PATH"/bin/doom -y sync -e
fi
#+END_SRC

* System configuration :sysconf:
** OSX :osx:
Some of this configurations are from [[https://github.com/mathiasbynens/dotfiles/blob/main/.macos][this]] link.

*** Always show scrollbar
#+BEGIN_SRC bash :noweb-ref osx-scrollbar-conf
ansi --green "Always show scrollbars"
defaults write NSGlobalDomain AppleShowScrollBars -string "Always"
#+END_SRC

*** Don't save to iCloud by default, use disk instead
#+BEGIN_SRC bash :noweb-ref osx-disable-icloud-conf
ansi --green "Save to disk and not in iCloud by default"
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
#+END_SRC

*** Quit printer when all jobs complete
#+BEGIN_SRC bash :noweb-ref osx-printer-conf
ansi --green "Quit printer app when jobs are completed"
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true
#+END_SRC

*** Disable the "Are you sure you want to open this app?" dialog
#+BEGIN_SRC bash :noweb-ref osx-disable-app-dialog-conf
ansi --green "Disable the “Are you sure you want to open this application?” dialog"
defaults write com.apple.LaunchServices LSQuarantine -bool false
#+END_SRC

*** Enable trackpad tap to click for this user and for the login screen
#+BEGIN_SRC bash :noweb-ref osx-tap-to-click-conf
ansi --green "Trackpad: enable tap to click for this user and for the login screen"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
#+END_SRC

*** Increase sound quality for Bluetooth headphones
#+BEGIN_SRC bash :noweb-ref osx-bluetooth-quality-conf
ansi --green "Increase sound quality for Bluetooth headphones/headsets"
defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40
#+END_SRC
*** Set fast keyboard repeat rate
#+BEGIN_SRC bash :noweb-ref osx-keyboard-rate-conf
ansi --green "Set a blazingly fast keyboard repeat rate"
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 10
#+END_SRC

*** Require password immediately after sleep or screen saver
#+BEGIN_SRC bash :noweb-ref osx-require-passwd-conf
ansi --green "Require password immediately after sleep or screen saver begins"
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0
#+END_SRC
*** Save screenshots to the desktop
#+BEGIN_SRC bash :noweb-ref osx-screenshot-to-desktop-conf
ansi --green "Save screenshots to the desktop"
defaults write com.apple.screencapture location -string "${HOME}/Desktop"
#+END_SRC
*** Save screenshots in PNG format
Other options: BMP, GIF, JPG, PDF, TIFF
#+BEGIN_SRC bash :noweb-ref osx-screenshot-format-conf
ansi --green "Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)"
defaults write com.apple.screencapture type -string "png"
#+END_SRC

*** Show hidden files in Finder by default
#+BEGIN_SRC bash :noweb-ref osx-show-hidden-files-conf
ansi --green "Finder: show hidden files by default"
defaults write com.apple.finder AppleShowAllFiles -bool true
#+END_SRC

*** Show all filename extensions in Finder
#+BEGIN_SRC bash :noweb-ref osx-finder-show-extensions-conf
ansi --green "Finder: show all filename extensions"
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
#+END_SRC

*** Avoid creating =.DS_Store= files on network or USB volumes
#+BEGIN_SRC bash :noweb-ref osx-avoid-ds-store-files-conf
ansi --green "Avoid creating .DS_Store files on network or USB volumes"
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
#+END_SRC

*** Check for daily for software updates
#+BEGIN_SRC bash :noweb-ref osx-daily-updates-conf
ansi --green "Set to check daily instead of weekly"
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
#+END_SRC

*** Set default clock format
#+BEGIN_SRC bash :noweb-ref osx-clock-format-conf
ansi --green "Set default clock format"
defaults write com.apple.menuextra.clock DateFormat -string "EEE d MMM h:mm:ss a"
#+END_SRC

*** Set default Finder location to =$HOME=
#+BEGIN_SRC bash :noweb-ref osx-default-finder-location-conf
ansi --green "Set Default Finder Location to Home Folder"
defaults write com.apple.finder NewWindowTarget -string "PfLo" &&
	defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"
#+END_SRC

*** Kill Finder to apply =defaults=
#+BEGIN_SRC bash :noweb-ref osx-killall-finder-conf
ansi --green "Killing Finder.."
killall Finder
#+END_SRC
*** Kill =SystemUIServer= for UI defaults
#+BEGIN_SRC bash :noweb-ref osx-killall-systemui-conf
ansi --green "Killing SystemUIServer"
killall SystemUIServer
#+END_SRC

*** Enable =locate= database
#+BEGIN_SRC bash :noweb-ref osx-locate-service-conf
ansi --green "Build Locate Database"
sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
#+END_SRC

*** Enable firewall
#+BEGIN_SRC bash :noweb-ref osx-firewall-conf
ansi --green "Enable firewall"
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on
#+END_SRC
*** Set network clock sync
#+BEGIN_SRC bash :noweb-ref osx-clock-network-conf
ansi --green "Set Clock Using Network Time"
sudo systemsetup setusingnetworktime on
#+END_SRC

** Linux :linux:
General Linux commands

- Speed up keyboard
#+BEGIN_SRC shell :cache no
xset r rate 180 40
#+END_SRC
** Archlinux :archlinux:
Archlinux related configuration.
*** Find all =*.pacnew= files in =/etc=
#+BEGIN_SRC shell
find /etc -regextype posix-extended -regex ".+\.pac(new|save)"
#+END_SRC
*** List =pacman= packages ignoring foreign packages (AUR, etc).
#+BEGIN_SRC sh :results file :file Pacfile :output-dir .
pacman -Qqen
#+END_SRC
*** Get list of foreing (AUR, etc) packages with =pacman=.
  #+BEGIN_SRC sh :results file :file Aurfile :output-dir .
  pacman -Qqem
  #+END_SRC

*** Pacman conf
This enables color, total downloads, check space and sets verbose PKG list when
running =pacman=.

#+BEGIN_SRC bash :noweb-ref archlinux-pacman-conf
sudo sed -i '/Color$/s/^#//g' /etc/pacman.conf
sudo sed -i '/TotalDownload$/s/^#//g' /etc/pacman.conf
sudo sed -i '/CheckSpace$/s/^#//g' /etc/pacman.conf
sudo sed -i '/VerbosePkgLists$/s/^#//g' /etc/pacman.conf
#+END_SRC

*** Set timezone
Enable =ntp= sync, set timezone to Sao Paulo and sync hardware clock.
#+BEGIN_SRC bash :noweb-ref archlinux-timezone-conf
sudo timedatectl set-ntp true
sudo ln -sf /usr/share/zoneinfo/Ameriaca/Sao_Paulo /etc/localtime
sudo hwclock --systohc
#+END_SRC

*** Set locale
Set locale to =en_US.UTF-8= by default and generate the locale file.
#+BEGIN_SRC bash :noweb-ref archlinux-locale-conf
sudo sed -i '/en_US.UTF-8$/s/^#//g' /etc/pacman.conf
sudo locale-gen
#+END_SRC

** Docker :docker:
- Allow Docker runs with non-root user.
#+BEGIN_SRC shell
sudo usermod -aG docker $USER
newgrp docker
#+END_SRC
** Set SSH permissions :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref ssh-perms
chmod 755 "$HOME"/.ssh
[[ -f "$HOME/.ssh/id_rsa" ]] && chmod 600 "$HOME"/.ssh/id_rsa
[[ -f "$HOME/.ssh/id_rsa.pub" ]] && chmod 600 "$HOME"/.ssh/id_rsa.pub
#+END_SRC

** Set GNUPG permissions :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref gnupg-perms
chown -R $(whoami) ~/.gnupg/
# Also correct the permissions and access rights on the directory
chmod 700 ~/.gnupg/*
chmod 700 ~/.gnupg
#+END_SRC
** Initialize chezmoi :osx:archlinux:
Change the =$HOME/dotfiles= directory
#+BEGIN_SRC bash
chezmoi init -S $HOME/dotfiles
#+END_SRC

** Ensure important directories :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref ensure-dirs
mkdir -pv $HOME/mail
mkdir -pv $HOME/mail/.attachments
mkdir -pv $HOME/workspace/opt
mkdir -pv $HOME/workspace/go
#+END_SRC
** Apply Chezmoi config files
#+BEGIN_SRC bash
chezmoi apply -v
#+END_SRC
* Dotfiles configuration :dotfiles:
** Chezmoi
*** Configuration
**** Chezmoi default variables

When =secret= is set to =true= (default), it will apply all template files which
requires any secret to be applied. If chezmoi is running in a CI environment,
set =secret= to =false= by default.
#+BEGIN_SRC yaml :noweb-ref chezmoi-default-vars
{{- $secrets := true -}}
...

{{- if (env "CI") -}}
{{- $secrets = false -}}
...
{{- end -}}
#+END_SRC
**** Chezmoi prompts
If the =ASK= env is defined (=ASK=1 chezmoi init -S <dotfiles-dir>=), Chezmoi
will prompt for the default [[*Chezmoi default variables][variables]].
#+BEGIN_SRC yaml :noweb-ref chezmoi-prompt-vars
{{- if (env "ASK") }}
{{- $secrets := promptBool "secrets" -}}
{{- $name := promptString "full name" -}}
...
{{- end -}}
#+END_SRC
**** Chezmoi data configuration
Variables are then passed to the =data= section
#+BEGIN_SRC yaml :noweb-ref chezmoi-data-vars
...
data:
  secrets: {{ $secrets }}
  headless: {{ $headless }}
  email: {{ $email }}
  ...
#+END_SRC

**** Chezmoi secrets configuration
If secrets is =true=, then apply =bitwarden='s item ids
#+BEGIN_SRC yaml :noweb-ref chezmoi-bitwarden-vars
{{- if $secrets }}
  bitwarden:
    jira: 8c7e36c5-a859-4fe6-a0c2-acb500c08fff
    ...
{{- end -}}
#+END_SRC
**** Chezmoi final configuration
Finally, from the previous Chezmoi section, this is the generated configuration
file.
#+INCLUDE: .chezmoi.yaml.tmpl src yaml
*** Chezmoi ignore
**** Ignore by distribution
Since Chezmoi allows multiple platforms, we can handle which files we want
Chezmoi to ignore based on the =OS= type.
#+BEGIN_SRC text :noweb-ref chezmoi-ignore-by-os
# Don't copy the following files if OS is OSX
{{- if ne .chezmoi.os "linux" }}
.xinitrc
.xsession
...
{{- end }}

# Don't copy the following files if OS is Linux
{{- if ne .chezmoi.os "darwin" }}
.skhdrc
...
{{- end }}
#+END_SRC

**** Ignore if =secrets= is not set
Remember the =secret= variable set in [[*Chezmoi default variables][default variables]]? Since this dotfiles is
ran on a CI, we don't want to apply any configuration file that contains any
secret. Since the =CI= environment variable is set, =secrets= defaults to
=false= .
#+BEGIN_SRC text :noweb-ref chezmoi-ignore-secrets
{{- if not .secrets }}
.mbsyncrc
.config/msmtp
.wakatime.cfg
...
{{- end }}
#+END_SRC
**** Chezmoi final =.chezmoiignore=
The final configuration
#+INCLUDE: .chezmoiignore src text
**** Archive :ARCHIVE:
***** Defaults to ignore
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-27 Sat 23:30
:END:
#+BEGIN_SRC text :noweb-ref chezmoi-ignore-defaults
...
#+END_SRC
** Wakatime
The following in my Wakatime configuration. The API key is set automatically by
Chezmoi, see [[*Chezmoi secrets configuration][Chezmoi secrets configuration]].
#+INCLUDE: dot_wakatime.cfg.tmpl src conf

** Pythonrc
The following enables autocomplete when on a standard python interpreter and
keeps history around sessions.
#+INCLUDE: dot_pythonrc src python
** Xorg :archlinux:
*** xmodmap
#+INCLUDE: dot_Xmodmap src text
*** XResources
Create =Xresources= file with Gruvbox as default theme.
#+INCLUDE: dot_xresources src text
*** xinitrc
Create =xinitrc= which gets called by [[*xsession][=xsession=]].
#+INCLUDE: executable_dot_xinitrc src shell
*** xsession
Start =i3wm= automatically on Xsession
#+INCLUDE: executable_dot_xsession src shell
** Tmux
*** Gitmux
The following is [[https://github.com/arl/gitmux][Gitmux]]'s configuration file.
#+INCLUDE: dot_gitmux.conf src conf
*** Tmux conf
The =tmux.conf= requires [[https://github.com/tmux-plugins/tpm][TPM]] to work.
#+INCLUDE: dot_tmux.conf src conf
*** Archive :ARCHIVE:
**** CANCELED Tmux base16 gruvbox theme
CLOSED: [2021-02-27 Sat 22:56]
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-27 Sat 22:59
:END:
:LOGBOOK:
- State "CANCELED"   from              [2021-02-27 Sat 22:56]
:END:

This isn't needed as I am now using [[github:Alkindi42/tmux-bitwarden][Alkindi42/tmux-bitwarden]].

The following configures theme defaults for tmux
#+BEGIN_SRC conf :tangle dot_tmux-gruvbox-dark.conf
# from: https://github.com/LawAbidingCactus/tmux-gruvbox-truecolor
### theme settings ###

# window separators
set-option -wg window-status-separator ""

# monitor window changes
set-option -wg monitor-activity on
set-option -wg monitor-bell on

# set statusbar update interval
set-option -g status-interval 1

### colorscheme ###

# change window screen colors
set-option -wg mode-style bg="#FE8019",fg="#3C3836"

# default statusbar colors (terminal bg should be #282828)
set-option -g status-style bg=terminal,fg="#A89984"

# default window title colors
set-option -wg window-status-style bg="#3C3836",fg="#7C6F64"

# colors for windows with activity
set-option -wg window-status-activity-style bg="#3C3836",fg="#A89984"

# colors for windows with bells
set-option -wg window-status-bell-style bg="#3C3836",fg="#FE8019"

# active window title colors
set-option -wg window-status-current-style bg="#FE8019",fg="#3C3836"

# pane border
set-option -g pane-active-border-style fg="#FE8019"
set-option -g pane-border-style fg="#3C3836"

# message info
set-option -g message-style bg="#FE8019",fg="#3C3836"

# writing commands inactive
set-option -g message-command-style bg="#A89984",fg="#3C3836"

# pane number display
set-option -g display-panes-active-colour "#FE8019"
set-option -g display-panes-colour "#3C3836"

# clock
set-option -wg clock-mode-colour "#FE8019"

# copy mode highlighting
%if #{>=:#{version},3.2}
    set-option -wg copy-mode-match-style "bg=#A89984,fg=#3C3836"
    set-option -wg copy-mode-current-match-style "bg=#FE8109,fg=#3C3836"
%endif

set -g status-right-length 150

# statusbar formatting
# "#fe8019" MUST be in lowercase here (conflicts with statusline alias otherwise)
set-option -g status-left "#{session_name} "
set-option -g status-right "#{prefix_highlight} #{battery_icon} #{battery_percentage} | %d-%m-%Y %H:%M:%S | Online: #{online_status}| #{weather} | #(gitmux -cfg ~/.gitmux.conf '#{pane_current_path}') "

set-option -wg window-status-current-format " #{window_index} #{window_name} "
set-option -wg window-status-format " #{window_index} #{window_name} "
#+END_SRC
** Dircolors
#+INCLUDE: dot_dircolors src shell
** Curl
#+INCLUDE: dot_curlrc src rc
** Inputrc
This enables autocomplete for any program that uses =readline= and enabled =vi=
keybinding.
#+INCLUDE: dot_inputrc src rc
** Editorconfig
#+INCLUDE: dot_editorconfig src toml
** Skhdrc :osx:
Sets OSX keybindings
#+INCLUDE: dot_skhdrc src rc
** Zsh
My zsh setup if organized as following:
- =.zshrc= includes all zsh files related to the configuration
- =.zsh/aliases.zsh= holds all aliases I use
- =.zsh/evals.zsh= holds all async evaluations, such as =pyenv= and =dircolors=
- =.zsh/exports.zsh= holds all exported variables
- =.zsh/git_aliases.zsh= holds all git related aliases
- =.zsh/gpg_agent.zsh= handles GnuPG agent
- =.zsh/history.zsh= configures how command history is saved
- =.zsh/init.zsh= handles all important initialization that requires everything
  to work
- =.zsh/keys.zsh= keybindings
- =.zsh/plugins.txt= plugins that are managed with Antibody
- =.zsh/stack.zsh= configures shell stack related configuration

*** plugins.txt
#+INCLUDE: dot_zsh/plugins.txt src text
*** keys.zsh
#+INCLUDE: dot_zsh/keys.zsh src shell
*** stack.zsh
#+INCLUDE: dot_zsh/stack.zsh src shell
*** history.zsh
#+INCLUDE: dot_zsh/history.zsh src shell
*** gpg-agent.zsh
#+INCLUDE: dot_zsh/gpg-agent.zsh src shell
*** exports.zsh
#+INCLUDE: dot_zsh/exports.zsh src shell
*** aliases.zsh
#+INCLUDE: dot_zsh/aliases.zsh src shell
*** git_aliases.zsh
#+INCLUDE: dot_zsh/git_aliases.zsh src shell
*** init.zsh
#+INCLUDE: dot_zsh/init.zsh src shell
*** evals.zsh
#+INCLUDE: dot_zsh/evals.zsh src shell
*** .zshrc
For performance, this first checks if the generated plugin bundle is in
=$HOME/.zsh_plugins.sh=. If not, it will generate upon start.

#+INCLUDE: dot_zshrc src shell
** Git
*** Git config
The =user= section is auto generated with Chezmoi.
#+INCLUDE: dot_gitconfig.tmpl src conf
*** Git templates
I keep a few Git templates, which are applied on =git init= or on =clone=.

**** Show a small reminder of commits when running =git commit=

Note: The new line at the beginning is important.
#+INCLUDE: dot_gittemplates/commit src text
** Vim
*** vimrc
The following configuration requires both all plugins to be install and VimPlug.
#+INCLUDE: dot_vim/vimrc src viml
*** plugins.vim
#+INCLUDE: dot_vim/plugins.vim src viml
*** nvimrc
This allows =nvim= to read =vim='s configuration.
#+INCLUDE: dot_config/nvim/init.vim src viml
** Emacs
I am not a big fan of editor/shell framework, but Doom Emacs is really an
exception.

*** init.el
Enabled plugins
#+BEGIN_SRC elisp :tangle dot_doom.d/init.el
(doom! :completion
  (company
    +auto +tng) ; the ultimate code completion backend
  (ivy +fuzzy) ; a search engine for love and life

  :ui
  deft
  doom              ; what makes DOOM look the way it does
  ;; doom-dashboard    ; a nifty splash screen for Emacs
  doom-quit         ; DOOM quit-message prompts when you quit Emacs
  fill-column       ; a `fill-column' indicator
  hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
  ;; indent-guides     ; highlighted indent columns
  modeline          ; snazzy, Atom-inspired modeline, plus API
  nav-flash         ; blink the current line after jumping
  ophints           ; highlight the region an operation acts on
  (popup            ; tame sudden yet inevitable temporary windows
    +all             ; catch all popups that start with an asterix
    +defaults)       ; default popup rules
                                        ;pretty-code       ; replace bits of code with pretty symbols
  ;;tabs              ; an tab bar for Emacs
  ;;treemacs          ; a project drawer, like neotree but cooler
  ;;unicode           ; extended unicode support for various languages
  vc-gutter         ; vcs diff in the fringe
  vi-tilde-fringe   ; fringe tildes to mark beyond EOB
  window-select     ; visually switch windows
  workspaces        ; tab emulation, persistence & separate workspaces
  ;;zen               ; distraction-free coding or writing

  :editor
  (evil +everywhere); come to the dark side, we have cookies
  file-templates    ; auto-snippets for empty files
  ;; fold              ; (nigh) universal code folding
  (format +onsave)  ; automated prettiness
  ;;god               ; run Emacs commands without modifier keys
  ;;lispy             ; vim for lisp, for people who don't like vim
  ;; multiple-cursors  ; editing in many places at once
  ;;objed             ; text object editing for the innocent
  ;;parinfer          ; turn lisp into python, sort of
  rotate-text       ; cycle region at point between text candidates
  snippets          ; my elves. They type so I don't have to
  ;;word-wrap         ; soft wrapping with language-aware indent

  :emacs
  (undo +tree)
  dired             ; making dired pretty [functional]
  electric          ; smarter, keyword-based electric-indent
  ibuffer           ; interactive buffer management
  vc                ; version-control and Emacs, sitting in a tree

  :term
  eshell            ; a consistent, cross-platform shell (WIP)
  ;;shell             ; a terminal REPL for Emacs
  ;;term              ; terminals in Emacs
  ;;vterm             ; another terminals in Emacs

  :checkers
  ;;syntax              ; tasing you for every semicolon you forget
  spell             ; tasing you for misspelling mispelling
  grammar           ; tasing grammar mistake every you make

  :tools
  ;;ansible
  debugger          ; FIXME stepping through code, to help you add bugs
  ;;direnv
  (docker +lsp)
  editorconfig      ; let someone else argue about tabs vs spaces
  ;;ein               ; tame Jupyter notebooks with emacs
  (eval +overlay)     ; run code, run (also, repls)
  ;;gist              ; interacting with github gists
  (lookup           ; helps you navigate your code and documentation
    +docsets)        ; ...or in Dash docsets locally
  (lsp +eglot)
  (magit +forge)     ; a git porcelain for Emacs
  make              ; run make tasks from Emacs
  ;;pass              ; password manager for nerds
  ;;pdf               ; pdf enhancements
  ;;prodigy           ; FIXME managing external services & code builders
  ;;rgb               ; creating color strings
  terraform         ; infrastructure as code
  ;;tmux              ; an API for interacting with tmux
  ;;upload            ; map local to remote projects via ssh/ftp
  biblio

  :lang
  ;;agda              ; types of types of types of types...
  (cc +lsp)                ; C/C++/Obj-C madness
  (yaml +lsp)
  ;;clojure           ; java with a lisp
  ;;common-lisp       ; if you've seen one lisp, you've seen them all
  ;;coq               ; proofs-as-programs
  ;;crystal           ; ruby at the speed of c
  ;;csharp            ; unity, .NET, and mono shenanigans
  data              ; config/data formats
  ;;elixir            ; erlang done right
  ;;elm               ; care for a cup of TEA?
  emacs-lisp        ; drown in parentheses
  ;;erlang            ; an elegant language for a more civilized age
  ;;ess               ; emacs speaks statistics
  ;;faust             ; dsp, but you get to keep your soul
  ;;fsharp           ; ML stands for Microsoft's Language
  (go +lsp)                ; the hipster dialect
  ;;(haskell +dante)  ; a language that's lazier than I am
  ;;hy                ; readability of scheme w/ speed of python
  ;;idris             ;
  ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
  ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
  ;;julia             ; a better, faster MATLAB
  ;;kotlin            ; a better, slicker Java(Script)
  latex             ; writing papers in Emacs has never been so fun
  ;;lean
  ;;factor
  ;;ledger            ; an accounting system in Emacs
  ;;lua               ; one-based indices? one-based indices
  markdown          ; writing docs for people to ignore
  ;;nim               ; python + lisp at the speed of c
  ;;nix               ; I hereby declare "nix geht mehr!"
  ;;ocaml             ; an objective camel
  (org              ; organize your plain life in plain text
    +roam
    +hugo
    +journal
    +gnuplot
    +pancoc
    +dragndrop       ; drag & drop files/images into org buffers
    +journal)
  ;;+jupyter        ; ipython/jupyter support for babel
  ;;+pandoc          ; export-with-pandoc support
  ;;+pomodoro        ; be fruitful with the tomato technique
  ;; +present)        ; using org-mode for presentations
  ;;perl              ; write code no one else can comprehend
  ;;php               ; perl's insecure younger brother
  ;;plantuml          ; diagrams for confusing people more
  ;;purescript        ; javascript, but functional
  (python +pyenv)            ; beautiful is better than ugly
  ;;qt                ; the 'cutest' gui framework ever
  ;;racket            ; a DSL for DSLs
  rest              ; Emacs as a REST client
  ;;rst               ; ReST in peace
  ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
  rust                ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
  ;;scala             ; java, but good
  ;;scheme            ; a fully conniving family of lisps
  (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
  ;;solidity          ; do you need a blockchain? No.
  ;;swift             ; who asked for emoji variables?
  ;;terra             ; Earth and Moon in alignment for performance.
  ;;web               ; the tubes

  :email
  (mu4e +gmail)
  ;;notmuch
  ;;(wanderlust +gmail)

  :app
  ;;calendar
  ;;irc               ; how neckbeards socialize
  (rss +org)        ; emacs as an RSS reader
  ;;twitter           ; twitter client https://twitter.com/vnought

  :config
  ;;literate
  (default +bindings +smartparens)

  :os
  macos)
#+END_SRC
*** packages.el
Some custom packages I use
#+BEGIN_SRC elisp :tangle dot_doom.d/packages.el
(package! pyenv-mode-auto)
(package! wakatime-mode)
(package! ob-mermaid)
(package! org-roam-server)
(package! yasnippet-snippets)
(package! org-ref)
(package! citeproc-org)
(package! helm
  :disable t)
#+END_SRC
*** config.el
**** Emacs doom configuration
#+BEGIN_SRC elisp :noweb-ref doom-config
(setq user-full-name "Ben Mezger"
  user-mail-address "me@benmezger.nl")

(setq doom-font (font-spec :family "Hack" :size 14))
(setq doom-theme 'doom-monokai-spectrum)
(setq display-line-numbers-type t)

(display-time-mode 1)
(display-battery-mode 1)
(toggle-frame-maximized)
#+END_SRC
**** LSP and completion
#+BEGIN_SRC elisp :noweb-ref doom-lsp
(after! lsp-mode
  :config
  (setq lsp-response-timeout 90000))

(after! company-lsp
  :config
  (push 'company-lsp company-backends)
  (setq company-lsp-async t)
  (setq company-lsp-cache-candidates t)
  (setq company-lsp-enable-recompletion t))

(after! company
  :config
  (setq company-selection-wrap-around t)
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0))
#+END_SRC
**** Doom modeline
#+BEGIN_SRC elisp :noweb-ref doom-modeline
(after! doom-modeline
  :config

  (set-face-attribute 'mode-line nil :family "Hack" :height 125)
  (set-face-attribute 'mode-line-inactive nil :family "Hack" :height 125)

  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

  (setq doom-modeline-icon (display-graphic-p))
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)

  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)

  (setq doom-modeline-enable-word-count t)
  (setq doom-modeline-buffer-encoding t)
  (setq doom-modeline-indent-info t)

  (setq doom-modeline-mu4e nil)
  (setq doom-modeline-irc nil)

  (setq doom-modeline-env-version t)
  (setq doom-modeline-env-load-string "...")

  (setq doom-modeline-continuous-word-count-modes
    '(markdown-mode gfm-mod))

  ;; Don’t compact font caches during GC.
  (setq inhibit-compacting-font-caches t))

#+END_SRC
**** Flycheck
#+BEGIN_SRC elisp :noweb-ref doom-flycheck
(after! flycheck
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enable)))
#+END_SRC

**** Ivy
Keep history of recent buffers
#+BEGIN_SRC elisp :noweb-ref doom-ivy
(after! ivy
  :config
  (setq enable-recursive-minibuffers t)

  ;; enable this if you want `swiper' to use it
  (setq search-default-mode #'char-fold-to-regexp)
  (setq ivy-re-builders-alist
    '((swiper . ivy--regex-plus)
       (counsel-rg . ivy--regex-plus)
       (t      . ivy--regex-fuzzy)))

  (setq ivy-bibtex-default-action 'ivy-bibtex-insert-key)

  (defun eh-ivy-return-recentf-index (dir)
    (when (and (boundp 'recentf-list)
            recentf-list)
      (let ((files-list
              (cl-subseq recentf-list
                0 (min (- (length recentf-list) 1) 20)))
             (index 0))
        (while files-list
          (if (string-match-p dir (car files-list))
            (setq files-list nil)
            (setq index (+ index 1))
            (setq files-list (cdr files-list))))
        index)))

  (defun eh-ivy-sort-file-function (x y)
    (let* ((x (concat ivy--directory x))
            (y (concat ivy--directory y))
            (x-mtime (nth 5 (file-attributes x)))
            (y-mtime (nth 5 (file-attributes y))))
      (if (file-directory-p x)
        (if (file-directory-p y)
          (let ((x-recentf-index (eh-ivy-return-recentf-index x))
                 (y-recentf-index (eh-ivy-return-recentf-index y)))
            (if (and x-recentf-index y-recentf-index)
              ;; Directories is sorted by `recentf-list' index
              (< x-recentf-index y-recentf-index)
              (string< x y)))
          t)
        (if (file-directory-p y)
          nil
          ;; Files is sorted by mtime
          (time-less-p y-mtime x-mtime)))))

  (add-to-list 'ivy-sort-functions-alist
    '(read-file-name-internal . eh-ivy-sort-file-function)))
#+END_SRC

**** Org
#+BEGIN_SRC elisp :noweb-ref doom-org
(after! org
  :config
  (setq org-log-done 'time)
  (setq org-clock-persist 'history)
  (setq org-directory "~/workspace/org")
  (setq org-archive-location "archives/%s_archive::")
  (setq org-agenda-files (list org-directory org-roam-directory))
  (org-clock-persistence-insinuate)
  (setq-default org-catch-invisible-edits 'smart)
  (setq org-log-into-drawer t)
  (setq org-agenda-inhibit-startup t)
  (add-hook! 'org-mode-hook #'turn-on-auto-fill)
  (setq bibtex-completion-bibliography (concat org-directory "/bibliography.bib"))

  (setq org-todo-keywords
    '((sequence "TODO(t!)" "CURRENT(u!)" "WAIT(w@/!)" "NEXT(n!)" "PROJ(o!)" "|")
       (sequence "READ(!)")
       (sequence "|" "DONE(d!)" "CANCELED(c!)"))
    org-todo-keyword-faces
    '(("CURRENT"  . "orange")
       ("TODO" . "systemRedColor")
       ("READ" . "systemOrangeColor")
       ("HOLD"  . "indianRed")
       ("WAIT" . "salmon1")
       ("PROJ" . "systemYellowColor")))

  (setq org-capture-templates
    '(
       ("c" "Code" entry (file "~/workspace/org/code.org")
         (file "~/workspace/org/templates/code-snippet.capture"))
       ("n" "Note" entry (file+olp "~/workspace/org/notes.org" "Inbox")
         "* %?\nEntered on %U\n  %i\n  %a")
       ("t" "Todo" entry (file "~/workspace/org/todos.org")
         "* TODO %?\n %i\n  %a")
       ("r" "Register new book" entry (file+olp "~/workspace/org/notes.org" "Books")
         (file "~/workspace/org/templates/new-book.capture"))
       ("d" "Decision note" entry (file "~/workspace/org/decisions.org")
         (file "~/workspace/org/templates/decision.capture"))
       ("w" "Weekly journal" entry (file+olp+datetree "~/workspace/org/journal/weekly.org" "Weekly notes")
         (file "~/workspace/org/templates/weekly-journal.capture") :tree-type week)))


  (setq ob-async-no-async-languages-alist '("gnuplot" "mermaid")))
#+END_SRC
**** Orgroam
#+BEGIN_SRC elisp :noweb-ref doom-orgroam
(after! org-roam
  :defer t
  (setq org-roam-directory "~/workspace/org/roam")
  (setq org-roam-index-file (concat org-roam-directory "/" "index.org"))

  (setq org-roam-capture-templates
    '(("d" "default" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
        :head "#+TITLE: ${title}
#+DATE: %T
#+FILETAGS: %^G
#+SETUPFILE: %(concat (file-name-as-directory org-directory) \"hugo.setup\")
#+HUGO_SLUG: ${slug}
#+HUGO_TAGS: %^{Hugo tags}

- tags :: "
        :unnarrowed t)
       ("p" "private" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "private/%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
         :head "#+TITLE: ${title}
#+DATE: %T
#+FILETAGS: :personal:%^G
#+HUGO_SLUG: ${slug}
"
         :unnarrowed t)))

  (defun custom-org-protocol-focus-advice (orig &rest args)
    (x-focus-frame nil)
    (apply orig args))

  (advice-add 'org-roam-protocol-open-ref :around
    #'custom-org-protocol-focus-advice)
  (advice-add 'org-roam-protocol-open-file :around
    #'custom-org-protocol-focus-advice))
#+END_SRC

Easily exports all my roams to my personal blog (defined in my =SETUPFILE=).
#+BEGIN_SRC elisp :noweb-ref doom-orgroam-export
(after! (org org-roam)
  :defer t
  (defun benmezger/org-roam-export-all ()
    "Re-exports all Org-roam files to Hugo markdown."
    (interactive)
    (dolist (f (org-roam--list-all-files))
      (with-current-buffer (find-file f)
        (when (s-contains? "SETUPFILE" (buffer-string))
          (org-hugo-export-wim-to-md)))))

  (defun benmezger/org-roam--backlinks-list (file)
    (when (org-roam--org-roam-file-p file)
      (mapcar #'car (org-roam-db-query
                      [:select :distinct [from]
                        :from links
                        :where (= to $s1)
                        :and from :not :like $s2] file "%private%"))))

  (defun benmezger/org-export-preprocessor (_backend)
    (when-let ((links (benmezger/org-roam--backlinks-list (buffer-file-name))))
      (insert "\n** Backlinks\n")
      (dolist (link links)
        (insert (format "- [[file:%s][%s]]\n"
                  (file-relative-name link org-roam-directory)
                  (org-roam--get-title-or-slug link))))))

  (add-hook 'org-export-before-processing-hook #'benmezger/org-export-preprocessor)
  (remove-hook! 'find-file-hook #'+org-roam-open-buffer-maybe-h))
#+END_SRC

If my =.org= file has a =SETUPFILE= file, then enable =org-hugo-auto-export-mode=.
#+BEGIN_SRC elisp :noweb-ref doom-org-hugo
(after! (org ox-hugo)
  :defer t
  (defun benmezger/conditional-hugo-enable ()
    (save-excursion
      (if (cdr (assoc "SETUPFILE" (org-roam--extract-global-props '("SETUPFILE"))))
        (org-hugo-auto-export-mode +1)
        (org-hugo-auto-export-mode -1))))
  (add-hook 'org-mode-hook #'benmezger/conditional-hugo-enable))
#+END_SRC

Enable Roam server for easy visualization
#+BEGIN_SRC elisp :noweb-ref doom-roam-server
(use-package! org-roam-server
  :defer t)
#+END_SRC

**** Delft
#+BEGIN_SRC elisp :noweb-ref doom-deft
(after! deft
  :defer t
  :config
  (setq deft-directory org-directory)
  (setq deft-extensions '("org" "md" "txt"))
  (setq deft-default-extension "org")
  (setq deft-recursive t)
  (setq deft-use-filename-as-title nil)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules '((nospace . "-"))))
#+END_SRC

**** Wakatime
#+BEGIN_SRC elisp :noweb-ref doom-wakatime
(use-package! wakatime-mode
  :init
  (cond ((string-equal system-type "gnu/linux")
    (setq wakatime-cli-path "/usr/bin/wakatime"))
    ((string-equal system-type "darwin")
      (setq wakatime-cli-path "/usr/local/bin/wakatime")))
  :config
  (global-wakatime-mode))
#+END_SRC

**** PySort
#+BEGIN_SRC elisp :noweb-ref doom-pysort
(use-package! py-isort
  :defer t
  :init
  (add-hook 'before-save-hook 'py-isort-before-save))
#+END_SRC

**** Elfeed
#+BEGIN_SRC elisp :noweb-ref doom-elfeed
(after! elfeed-org
  :defer t
  :init
  (setq rmh-elfeed-org-files (list "~/workspace/org/urls.org")))
#+END_SRC

**** ob-mermaid
#+BEGIN_SRC elisp :noweb-ref doom-ob-mermaid
(after! ob-mermaid
  :defer t
  :init
  (setq ob-mermaid-cli-path "/usr/local/bin/mmdc"))
#+END_SRC

**** Mu4e
#+BEGIN_SRC elisp :noweb-ref doom-mu4e
(after! mu4e
  :defer t
  :config
  (cond ((string-equal system-type "gnu/linux")
          (setq sendmail-program "/usr/bin/msmtp"
            send-mail-function 'smtpmail-send-it
            message-sendmail-f-is-evil t
            message-sendmail-extra-arguments '("--read-envelope-from"))
          message-send-mail-function 'message-send-mail-with-sendmail)
    ((string-equal system-type "darwin")
      (setq sendmail-program "/usr/local/bin/msmtp"
        send-mail-function 'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function 'message-send-mail-with-sendmail)))

  (set-email-account! "personal"
    '((mu4e-sent-folder       . "/personal/sent")
       (mu4e-drafts-folder     . "/personal/drafts")
       (mu4e-trash-folder      . "/personal/trash")
       (mu4e-refile-folder     . "/personal/archives")
       (user-mail-address . "me@benmezger.nl")
       (smtpmail-smtp-user     . "me@benmezger.nl")
       (smtpmail-smtp-server     . "smtp.gmail.com")
       (smtpmail-smtp-service . 587)
       (mu4e-compose-signature . "---\nBen Mezger")))

  (set-email-account! "work"
    '((mu4e-sent-folder       . "/work/sent")
       (mu4e-drafts-folder     . "/work/drafts")
       (mu4e-trash-folder      . "/work/trash")
       (mu4e-refile-folder     . "/work/all")
       (smtpmail-smtp-user     . "ben@ckl.io")
       (user-mail-address . "ben@ckl.io")
       (smtpmail-smtp-server     . "smtp.gmail.com")
       (smtpmail-smtp-service . 587)
       (mu4e-compose-signature . "---\nBen Mezger, Backend developer"))))
#+END_SRC
**** org-ref
#+BEGIN_SRC elisp :noweb-ref doom-org-ref
(after! org-ref
  :config
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  (setq org-ref-default-bibliography `,(list (concat org-directory "/bibliography.bib")))
  (setq org-ref-pdf-directory (concat org-directory "/pdfs/"))
  (setq org-ref-bibliography-notes (concat org-directory "/bibnotes.org"))
  (setq reftex-default-bibliography org-ref-default-bibliography))
#+END_SRC

**** Bibtex-completion
#+BEGIN_SRC elisp :noweb-ref doom-bibtex-completion
(after! bibtex-completion
  (setq bibtex-completion-format-citation-functions
    '((org-mode      . bibtex-completion-format-citation-org-link-to-PDF)
       (latex-mode    . bibtex-completion-format-citation-cite)
       (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
       (default       . bibtex-completion-format-citation-default))))
#+END_SRC

**** Citeproc-org
#+BEGIN_SRC elisp :noweb-ref doom-citeproc
(use-package! citeproc-org
  :after org
  :config
  (map! :map org-mode-map
        :localleader
        (:prefix ("-" . "bibliography")
         "i" #'org-ref-insert-link
         "r" #'org-ref-insert-ref-link
         "l" #'org-ref-insert-bibliography-link
         "c" #'org-ref-insert-cite-with-completion))

  (citeproc-org-setup))
#+END_SRC
**** Final config.el
#+BEGIN_SRC elisp :noweb yes :tangle dot_doom.d/config.el
<<doom-config>>

<<doom-lsp>>

<<doom-modeline>>

<<doom-flycheck>>

<<doom-ivy>>

<<doom-org>>

<<doom-orgroam>>

<<doom-orgroam-export>>

<<doom-org-hugo>>

<<doom-roam-server>>

<<doom-deft>>

<<doom-wakatime>>

<<doom-pysort>>

<<doom-ob-mermaid>>

<<doom-mu4e>>

<<doom-org-ref>>

<<doom-bibtex-completion>>

<<doom-citeproc>>
#+END_SRC
*** Snippets
The following are snippets that are automatically applied on a new file.

**** Org template
#+INCLUDE: dot_doom.d/snippets/org-mode/__ src elisp
**** Python template
#+INCLUDE: dot_doom.d/snippets/python-mode/__ src python
* Keybindings
** OSX
*** MPC
- =fn + cmd - e= - =opens editor=
- =cmd + return= - =opens alacritty=
- =fn + cmd - f1= - =mpc play=
- =fn + cmd - f2= - =mpc pause=
- =fn + cmd - f3= - =mpc prev=
- =fn + cmd - f4= - =mpc next=
- =fn + cmd - f5= - =mpc volume -10=
- =fn + cmd - f6= - =mpc volume +10=


* Troubleshooting
** Chezmoi does not seem to reload the configuration
Run =chezmoi init <dotfiles-path>= again. This should reload the configuration
by copying [[file:.chezmoi.yaml.tmpl][chezmoi.yaml]] to =$HOME/.config/chezmoi/chezmoi.yaml=.
** Sourcing env with i3
- For some reason, i3 is sourcing =.xprofile= instead of =xinitrc=, so for
  getting Github plugin for the [[file:dot_config/i3/status.toml][i3status-rust]] you need to set up a variable in
  your =.xprofile=
#+BEGIN_SRC shell
export I3RS_GITHUB_TOKEN="your-github-token"
#+END_SRC

* Scripts :scripts:
The following scripts is a compilation of all the previous commands, together
with some extra =OS= checks and a custom =echo= with colored output.

** Script base :noexport:
#+NAME: script-header
#+BEGIN_SRC shell :noweb: yes :exports none
#!/usr/bin/env bash
set -euo pipefail
#+END_SRC

This gets the current path the script is running, which /should/ be =scripts/=
and allows sourcing any file in this directory.

#+NAME: script-src-dir
#+BEGIN_SRC shell :noweb: yes :exports none
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
#+END_SRC

Source the =base.sh= script which includes script helpers.
#+NAME: script-base-source
#+BEGIN_SRC shell :noweb: yes :exports none
. "$DIR/base.sh"
#+END_SRC

Source [[https://github.com/fidian/ansi/blob/master/ansi][=ansi=]] for pretty =echo=.
#+NAME: script-ansi-source
#+BEGIN_SRC shell :noweb: yes :exports none
. "$DIR/ansi"
#+END_SRC

Source =buildcheck= for exiting when running on CI.
#+NAME: script-buildcheck-source
#+BEGIN_SRC shell :noweb: yes :exports none
. "$DIR/buildcheck.sh"
#+END_SRC

** Homebrew install final script
#+INCLUDE: scripts/install_homebrew.sh src shell
** Chezmoi install final script
#+INCLUDE: scripts/install_chezmoi.sh src shell
** Install packages final script
#+INCLUDE: scripts/install_deps.sh src shell
** Install AUR packages final script
#+INCLUDE: scripts/install_aur_packages.sh src shell
** Install Git packages final script
#+INCLUDE: scripts/install_git_repos.sh src shell
** Configure OSX final script
#+INCLUDE: scripts/set_osx_defaults.sh src shell
** Configure Archlinux final script
#+INCLUDE: scripts/set_archlinux_defaults.sh src shell
** Configure system final script
#+INCLUDE: scripts/configure_sys.sh src shell
** SSH permission final script
#+INCLUDE: scripts/set_ssh_perms.sh src shell
** GNUPG permission final script
#+INCLUDE: scripts/fix_gnupg_perms.sh src shell
** Ensure directory final script
#+INCLUDE: scripts/ensure_directories.sh src shell
* Local config :noexport:
#+NAME: org-hugo--get-pub-dir
#+BEGIN_SRC emacs-lisp :exports none
(defun org-hugo--get-pub-dir (info)
  "Return the post publication directory path.

The publication directory is created if it does not exist.

INFO is a plist used as a communication channel."
  (let* ((base-dir (if (plist-get info :hugo-base-dir)
                       (file-name-as-directory (plist-get info :hugo-base-dir))
                     (user-error "It is mandatory to set the HUGO_BASE_DIR property")))
         (content-dir ".content/")
         (section-path (org-hugo--get-section-path info))
         (bundle-dir (let ((bundle-path (or ;Hugo bundle set in the post subtree gets higher precedence
                                         (org-hugo--entry-get-concat nil "EXPORT_HUGO_BUNDLE" "/")
                                         (plist-get info :hugo-bundle)))) ;This is mainly to support per-file flow
                       (if bundle-path
                           (file-name-as-directory bundle-path)
                         "")))
         (pub-dir (let ((dir (concat base-dir content-dir section-path bundle-dir)))
                    (make-directory dir :parents) ;Create the directory if it does not exist
                    dir)))
    (file-truename pub-dir)))
#+END_SRC

#+RESULTS: org-hugo--get-pub-dir
: org-hugo--get-pub-dir
